on: [push, pull_request]

name: CI

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.65.0 # MSRV
          - stable
          - beta

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - uses: swatinem/rust-cache@v2
        with:
          shared-key: "ci"

      - name: Run cargo check
        run: cargo check --all-targets

  test:
    needs: [check]
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.65.0 # MSRV
          - stable
          - beta
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - uses: swatinem/rust-cache@v2
        with:
          shared-key: "ci"

      - name: Run cargo test
        run: cargo test

  cargo-deny:
    name: cargo-deny
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v3.5.2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  lint:
    needs: [check]
    name: Lint
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.optional }}
    strategy:
      fail-fast: false
      matrix:
        rust:
          - beta
        optional: [true]
        include:
          - rust: 1.65.0 # MSRV
            optional: false
    steps:
      - uses: actions/checkout@v3.5.2
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      - uses: swatinem/rust-cache@v2
        with:
          shared-key: "ci"
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings

  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: CI
    runs-on: ubuntu-latest
    needs:
      - cargo-deny
      - check
      - test
      - lint
    steps:
      - name: CI succeeded
        run: exit 0
